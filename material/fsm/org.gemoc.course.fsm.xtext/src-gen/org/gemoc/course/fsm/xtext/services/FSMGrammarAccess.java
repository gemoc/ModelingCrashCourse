/*
 * generated by Xtext 2.10.0
 */
package org.gemoc.course.fsm.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FSMGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FiniteStateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.course.fsm.xtext.FSM.FiniteStateMachine");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cFiniteStateMachineKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cStatesAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cStatesStateParserRuleCall_0_3_0_0 = (RuleCall)cStatesAssignment_0_3_0.eContents().get(0);
		private final Assignment cStatesAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_0_3_1_0 = (RuleCall)cStatesAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1 = (Keyword)cUnorderedGroup.eContents().get(1);
		
		//FiniteStateMachine:
		//	'FiniteStateMachine'
		//	name=EString
		//	'{' (states+=State states+=State*)? &
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FiniteStateMachine' name=EString '{' (states+=State states+=State*)? & '}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'FiniteStateMachine' name=EString '{' (states+=State states+=State*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'FiniteStateMachine'
		public Keyword getFiniteStateMachineKeyword_0_0() { return cFiniteStateMachineKeyword_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//(states+=State states+=State*)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//states+=State
		public Assignment getStatesAssignment_0_3_0() { return cStatesAssignment_0_3_0; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_0_3_0_0() { return cStatesStateParserRuleCall_0_3_0_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_0_3_1() { return cStatesAssignment_0_3_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_0_3_1_0() { return cStatesStateParserRuleCall_0_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1() { return cRightCurlyBracketKeyword_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.course.fsm.xtext.FSM.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsInitialStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsInitialStateInitialKeyword_1_0 = (Keyword)cIsInitialStateAssignment_1.eContents().get(0);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOutgoingTransitionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_4_1_0 = (RuleCall)cOutgoingTransitionsAssignment_4_1.eContents().get(0);
		private final Assignment cOutgoingTransitionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_4_2_0 = (RuleCall)cOutgoingTransitionsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//State:
		//	{State} isInitialState?='initial'? 'state'
		//	name=EString ('{' outgoingTransitions+=Transition outgoingTransitions+=Transition* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{State} isInitialState?='initial'? 'state' name=EString ('{' outgoingTransitions+=Transition
		//outgoingTransitions+=Transition* '}')?
		public Group getGroup() { return cGroup; }
		
		//{State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//isInitialState?='initial'?
		public Assignment getIsInitialStateAssignment_1() { return cIsInitialStateAssignment_1; }
		
		//'initial'
		public Keyword getIsInitialStateInitialKeyword_1_0() { return cIsInitialStateInitialKeyword_1_0; }
		
		//'state'
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('{' outgoingTransitions+=Transition outgoingTransitions+=Transition* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//outgoingTransitions+=Transition
		public Assignment getOutgoingTransitionsAssignment_4_1() { return cOutgoingTransitionsAssignment_4_1; }
		
		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_4_1_0() { return cOutgoingTransitionsTransitionParserRuleCall_4_1_0; }
		
		//outgoingTransitions+=Transition*
		public Assignment getOutgoingTransitionsAssignment_4_2() { return cOutgoingTransitionsAssignment_4_2; }
		
		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_4_2_0() { return cOutgoingTransitionsTransitionParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.course.fsm.xtext.FSM.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetStateCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetStateEStringParserRuleCall_1_0_1 = (RuleCall)cTargetStateCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputEStringParserRuleCall_3_0 = (RuleCall)cInputAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOutputAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOutputEStringParserRuleCall_4_1_0 = (RuleCall)cOutputAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNameEStringParserRuleCall_7_0 = (RuleCall)cNameAssignment_7.eContents().get(0);
		
		//Transition:
		//	'->' target=[State|EString]
		//	'['
		//	input=EString ('|' output=EString)?
		//	']' ':' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' target=[State|EString] '[' input=EString ('|' output=EString)? ']' ':' name=EString
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//target=[State|EString]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[State|EString]
		public CrossReference getTargetStateCrossReference_1_0() { return cTargetStateCrossReference_1_0; }
		
		//EString
		public RuleCall getTargetStateEStringParserRuleCall_1_0_1() { return cTargetStateEStringParserRuleCall_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//input=EString
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }
		
		//EString
		public RuleCall getInputEStringParserRuleCall_3_0() { return cInputEStringParserRuleCall_3_0; }
		
		//('|' output=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }
		
		//output=EString
		public Assignment getOutputAssignment_4_1() { return cOutputAssignment_4_1; }
		
		//EString
		public RuleCall getOutputEStringParserRuleCall_4_1_0() { return cOutputEStringParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//name=EString
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_7_0() { return cNameEStringParserRuleCall_7_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.course.fsm.xtext.FSM.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final FiniteStateMachineElements pFiniteStateMachine;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FSMGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFiniteStateMachine = new FiniteStateMachineElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.course.fsm.xtext.FSM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FiniteStateMachine:
	//	'FiniteStateMachine'
	//	name=EString
	//	'{' (states+=State states+=State*)? &
	//	'}';
	public FiniteStateMachineElements getFiniteStateMachineAccess() {
		return pFiniteStateMachine;
	}
	
	public ParserRule getFiniteStateMachineRule() {
		return getFiniteStateMachineAccess().getRule();
	}
	
	//State:
	//	{State} isInitialState?='initial'? 'state'
	//	name=EString ('{' outgoingTransitions+=Transition outgoingTransitions+=Transition* '}')?;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition:
	//	'->' target=[State|EString]
	//	'['
	//	input=EString ('|' output=EString)?
	//	']' ':' name=EString;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
